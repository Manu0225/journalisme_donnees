)+
geom_text_repel(
aes(label = label),
data = end_points_3,
fontface ="plain", color = "red", size = 3
)
print(myplot)
return(df_évol)
}
plot_evolution_fibre = function(df_évol){
dates=
#as.Date(
c("2017/10/01",
"2018/01/01","2018/04/01","2018/07/01","2018/10/01",
"2019/01/01","2019/04/01","2019/07/01","2019/10/01",
"2020/01/01","2020/04/01","2020/07/01"
)
#)
tmp = apply(apply(apply(df_évol[,6:17], 1, diff, lag=1), 2, sort),MARGIN = 2, taux_évolution)
colnames(df_évol)[6:17] = dates
#colnames(df_évol)[colnames(df_évol) == "T3 2017"] <- dates[2]
df_évol["label"] = tmp
tmp2 = sapply(tmp, function(x){
if (x<.1){
return(1)
}
else if(x<1.6){
return(2)
}
else{
return(3)
}
})
#print(tmp2)
df_évol["catégorie de croissance"] = tmp2
df_évol2 <- df_évol %>% pivot_longer(cols = 6:17, names_to = "Date",
values_to = "Proportion de locaux éligibles à la fibre")
#print(df_évol)
#print(tmp)
#df_évol$`Nom commune`
myplot = ggplot(df_évol2, aes(x=`Date`,
y=`Proportion de locaux éligibles à la fibre`,
color = `Nom commune`,
group = `Nom commune`,
#label = `Nom commune`
),
) +
#ylim(0,1.5) +
geom_point() + geom_line()
#  print(df_évol2)
end_points_1 = (
df_évol2 %>% filter(Date == "2020/07/01")
%>% filter(`catégorie de croissance` == 1)
)
end_points_2 = (
df_évol2 %>% filter(Date == "2020/07/01")
%>% filter(`catégorie de croissance` == 2)
)
end_points_3 = (
df_évol2 %>% filter(Date == "2020/07/01")
%>% filter(`catégorie de croissance` == 3)
)
#print(end_points)
myplot <- myplot +
geom_text_repel(
aes(label = label),
data = end_points_1,
fontface ="plain", color = "blue", size = 3
)+
geom_text_repel(
aes(label = label),
data = end_points_2,
fontface ="plain", color = "purple", size = 3
)+
geom_text_repel(
aes(label = label),
data = end_points_3,
fontface ="plain", color = "red", size = 3
)
print(myplot)
return(df_évol)
}
df_évol = plot_evolution_fibre(df_évol)
View(df_évol)
## CHOIX DE LA ZONE
df_évol = df_paca_avec_fibre[
df_paca_avec_fibre$`Meilleure estimation des locaux à date`>10000,][
c(1,2,3,4,10,16:27)]
df_évol[c(6:17)]=df_évol[c(6:17)] / rep(df_évol[c(5)],12)
df_évol = plot_evolution_fibre(df_évol)
## CHOIX DE LA ZONE
df_évol_paca = df_paca_avec_fibre[
df_paca_avec_fibre$`Meilleure estimation des locaux à date`>10000,][
c(1,2,3,4,10,16:27)]
df_évol_paca_samplé = df_évol_paca[sample(c(0:nrow(df_évol)), size=10),]
df_évol_martinique = df_martinique_avec_fibre[
c(1,2,3,4,10,16:27)
]
df_évol_guadeloupe = df_guadeloupe_avec_fibre[
c(1,2,3,4,10,16:27)]
df_évol = df_évol_paca_samplé
View(df_évol_guadeloupe)
View(df_évol)
df_évol = df_évol_paca_samplé
df_évol[c(6:17)]=df_évol[c(6:17)] / rep(df_évol[c(5)],12)
View(df_évol)
normaliser = function(df_évol){
df_évol[c(6:17)]=df_évol[c(6:17)] / rep(df_évol[c(5)],12)
return(df_évol)
}
df_évol_guadeloupe = normaliser(df_évol_guadeloupe)
df_évol_guadeloupe = plot_evolution_fibre(df_évol_guadeloupe)
View(df_évol_guadeloupe)
## CHOIX DE LA ZONE
df_évol_paca = df_paca_avec_fibre[
df_paca_avec_fibre$`Meilleure estimation des locaux à date`>10000,][
c(1,2,3,4,10,16:27)]
df_évol_paca_samplé = df_évol_paca[sample(c(0:nrow(df_évol)), size=10),]
df_évol_martinique = df_martinique_avec_fibre[
c(1,2,3,4,10,16:27)
]
df_évol_guadeloupe = df_guadeloupe_avec_fibre[
c(1,2,3,4,10,16:27)]
df_évol = df_évol_paca_samplé
normaliser = function(df_évol){
df_évol[c(6:17)]=df_évol[c(6:17)] / rep(df_évol[c(5)],12)
return(df_évol)
}
# GUADELOUPE
df_évol_guadeloupe = normaliser(df_évol_guadeloupe)
df_évol_guadeloupe = plot_evolution_fibre(df_évol_guadeloupe)
# PACA
df_évol_paca = normaliser(df_évol_paca)
df_évol_paca = plot_evolution_fibre(df_évol_paca)
# MARTINIQUE
df_évol_martinique = normaliser(df_évol_martinique)
df_évol_martinique = plot_evolution_fibre(df_évol_martinique)
ks.test(df_évol_guadeloupe[df_évol_guadeloupe$`catégorie de croissance` == 2,],
df_évol_paca[df_évol_paca$`catégorie de croissance` == 2,]
)
View(df_évol_paca)
df_évol_guadeloupe[df_évol_guadeloupe$`catégorie de croissance` == 2,]
View(df_évol_martinique)
ks.test(df_évol_guadeloupe[df_évol_guadeloupe$`catégorie de croissance` == 2,]$label,
df_évol_paca[df_évol_paca$`catégorie de croissance` == 2,]$label
)
ks.test(
df_évol_paca[df_évol_paca$`catégorie de croissance` == 3,]$label,
df_évol_paca[df_évol_paca$`catégorie de croissance` == 2,]$label
)
library(ggplot2)
library(dplyr)
#library(tidyverse)
library(readxl)
library(tidyverse)
library(leaps)
library(MASS)
#library(directlabels)
library(ggrepel)
source("ouvrir_données.R")
source("ouvrir_donnees.R")
source("ouvrir_donnees.R")
?source
source("ouvrir_donnees.R",encoding = "utf8")
source("ouvrir_donnees.R",encoding = "utf8")
View(df)
source('~/Gitlab/journalisme_donnees/code.R', encoding = 'UTF-8', echo=TRUE)
source('~/Gitlab/journalisme_donnees/évolutions.R', encoding = 'UTF-8', echo=TRUE)
source('~/Gitlab/journalisme_donnees/évolutions.R', encoding = 'UTF-8', echo=TRUE)
source('~/Gitlab/journalisme_donnees/ouvrir_donnees.R', encoding = 'UTF-8', echo=TRUE)
source('~/Gitlab/journalisme_donnees/évolutions.R', encoding = 'UTF-8', echo=TRUE)
## CHOIX DE LA ZONE
df_évol_paca = df_paca_avec_fibre[
df_paca_avec_fibre$`Meilleure estimation des locaux à date`>10000,][
c(1,2,3,4,10,16:27)]
df_évol_paca_samplé = df_évol_paca[sample(c(0:nrow(df_évol)), size=10),]
source('~/Gitlab/journalisme_donnees/évolutions.R', encoding = 'UTF-8', echo=TRUE)
source('~/Gitlab/journalisme_donnees/évolutions.R', encoding = 'UTF-8', echo=TRUE)
View(df)
source('~/Gitlab/journalisme_donnees/kolmogorov-smirnov_multiple.R', echo=TRUE)
df
df$`Siren EPCI`
unique(df$`Siren EPCI`)
source("init_données.R",encoding = "utf8")
unique(df_paca$`Siren EPCI`)
unique(df_paca$`Code département`)
df_paca[df_paca$`Code département` == unique(df_paca$`Code département`)]
df_paca[df_paca$`Code département` %in% unique(df_paca$`Code département`)]
df_paca[df_paca$`Code département` %in% unique(df_paca$`Code département`),]
View(df_paca)
df_évol_paca = df_paca[c(1, 2, 3, 4, 10, 16:27)]
df_évol_paca = reformat_data_frame(normaliser(df_évol_paca))
View(df_évol_paca)
source("évolutions.R",encoding = "utf8")
df_évol_paca = df_paca[c(1, 2, 3, 4, 10, 16:27)]
df_évol_paca = reformat_data_frame(normaliser(df_évol_paca))
View(df_évol_paca)
View(df)
df_évol_paca = df_paca[c(1, 2, 3, 4, 10, 16:27)]
df_évol_paca = reformat_data_frame(normaliser(df_évol_paca))
#df_paca[df_paca$`Code département` %in% unique(df_paca$`Code département`),]
#"04" "05" "06" "13" "83" "84"
select_département = function(df, département){
return (df[df$`Code département` == département,]$Delta)
}
ad.test(
select_département(df_paca, "04"),
select_département(df_paca, "05"),
select_département(df_paca, "06"),
select_département(df_paca, "13"),
select_département(df_paca, "83"),
select_département(df_paca, "84"),
)
View(df_évol_paca)
ad.test(
select_département(df_évol_paca, "04"),
select_département(df_évol_paca, "05"),
select_département(df_évol_paca, "06"),
select_département(df_évol_paca, "13"),
select_département(df_évol_paca, "83"),
select_département(df_évol_paca, "84"),
)
ad.test(
select_département(df_évol_paca, "04"),
select_département(df_évol_paca, "05"),
select_département(df_évol_paca, "06"),
select_département(df_évol_paca, "13"),
select_département(df_évol_paca, "83"),
select_département(df_évol_paca, "84"),
method = "exact", dist = FALSE, Nsim = 1000
)
ad.test(
select_département(df_évol_paca, "04"),
select_département(df_évol_paca, "05"),
select_département(df_évol_paca, "06"),
select_département(df_évol_paca, "13"),
select_département(df_évol_paca, "83"),
select_département(df_évol_paca, "84"),
method = "exact", dist = FALSE#, Nsim = 1000
)
ad.test(
select_département(df_évol_paca, "04"),
select_département(df_évol_paca, "04"),
select_département(df_évol_paca, "04"),
# select_département(df_évol_paca, "05"),
# select_département(df_évol_paca, "06"),
# select_département(df_évol_paca, "13"),
# select_département(df_évol_paca, "83"),
# select_département(df_évol_paca, "84"),
method = "exact", dist = FALSE
#, Nsim = 1000
)
unique(df_paca$`Siren EPCI`)
unique(df_paca[df_paca$`Code département`=="13",]$`Siren EPCI`)
ad.test(
select_EPCI(df_évol_paca, EPCI_num = "200054807"),
select_EPCI(df_évol_paca, EPCI_num = "200035087"),
select_EPCI(df_évol_paca, EPCI_num = "241300375"),
select_EPCI(df_évol_paca, EPCI_num = "241300417"),
method = "exact", dist = FALSE
)
select_EPCI = function(df, EPCI_num){
return (df[df$`Siren EPCI` == EPCI_num,]$Delta)
}
ad.test(
select_EPCI(df_évol_paca, EPCI_num = "200054807"),
select_EPCI(df_évol_paca, EPCI_num = "200035087"),
select_EPCI(df_évol_paca, EPCI_num = "241300375"),
select_EPCI(df_évol_paca, EPCI_num = "241300417"),
method = "exact", dist = FALSE
)
View(df_paca)
df_évol_paca["Siren EPCI"] = df_paca$`Siren EPCI`
ad.test(
select_EPCI(df_évol_paca, EPCI_num = "200054807"),
select_EPCI(df_évol_paca, EPCI_num = "200035087"),
select_EPCI(df_évol_paca, EPCI_num = "241300375"),
select_EPCI(df_évol_paca, EPCI_num = "241300417"),
method = "exact", dist = FALSE
)
View(df_guadeloupe_avec_fibre)
df_évol_guadeloupe = df_guadeloupe_avec_fibre[c(1, 2, 3, 4, 10, 16:27)]
df_évol_guadeloupe = reformat_data_frame(normaliser(df_évol_guadeloupe))
regression = régression(df_évol_guadeloupe, "Delta")
régression = function(df, type) {
if (type == "linear") {
model = lm(
df$`proportion de logements fibrés au T3 2020` ~
log(df$`Meilleure estimation des locaux à date`) +
df$`Proportion de HLM` +
df$`Équipements touristiques`,
data = df
)
#summary(model)
par(mfrow=c(2,2))
plot(model)
}
if (type == "logistic") {
model <- glm(
df$`Communes avec fibre` ~
log(df$`Meilleure estimation des locaux à date`) +
df$`Proportion de HLM` +
df$`Équipements touristiques`,
data = df,
family = binomial(link = "logit")
)
par(mfrow=c(2,2))
plot(model)
#summary(log.model)
}
if (type == "Delta"){
model = lm(
df$Delta ~
log(df$`Meilleure estimation des locaux à date`) +
df$`Proportion de HLM` +
df$`Équipements touristiques`,
data = df
)
#summary(model)
par(mfrow=c(2,2))
plot(model)
}
return (model)
}
regression = régression(df_évol_guadeloupe, "Delta")
View(df_évol_guadeloupe)
View(df_guadeloupe)
View(df_guadeloupe_avec_fibre)
regression = régression(df_guadeloupe_avec_fibre, "Delta",
Delta = df_évol_guadeloupe$Delta)
régression = function(df, type, Delta = NULL) {
if (type == "linear") {
model = lm(
df$`proportion de logements fibrés au T3 2020` ~
log(df$`Meilleure estimation des locaux à date`) +
df$`Proportion de HLM` +
df$`Équipements touristiques`,
data = df
)
#summary(model)
par(mfrow=c(2,2))
plot(model)
}
if (type == "logistic") {
model <- glm(
df$`Communes avec fibre` ~
log(df$`Meilleure estimation des locaux à date`) +
df$`Proportion de HLM` +
df$`Équipements touristiques`,
data = df,
family = binomial(link = "logit")
)
par(mfrow=c(2,2))
plot(model)
#summary(log.model)
}
if (type == "Delta"){
model = lm(
Delta ~
log(df$`Meilleure estimation des locaux à date`) +
df$`Proportion de HLM` +
df$`Équipements touristiques`,
data = df
)
#summary(model)
par(mfrow=c(2,2))
plot(model)
}
return (model)
}
regression = régression(df_guadeloupe_avec_fibre, "Delta",
Delta = df_évol_guadeloupe$Delta)
summary(regression)
source('~/Gitlab/journalisme_donnees/init_données.R', encoding = 'UTF-8', echo=TRUE)
df_regions = read.csv("data/codes_régions.csv",
sep = ';',
fileEncoding = "utf8")[, c(1, 6)]
View(df_regions)
R --version
version[['version.string']]
source('~/Gitlab/journalisme_donnees/init_données.R', encoding = 'UTF-8', echo=TRUE)
run()
run = function() {
## CHOIX DE LA ZONE
df_évol_paca = df_paca_avec_fibre[df_paca_avec_fibre$`Meilleure estimation des locaux à date` >
10000, ][c(1, 2, 3, 4, 10, 16:27)]
df_évol_paca_samplé  = df_évol_paca[sample(c(0:nrow(df_évol_paca)), size =
10), ]
df_évol_martinique = df_martinique_avec_fibre[c(1, 2, 3, 4, 10, 16:27)]
df_évol_guadeloupe = df_guadeloupe_avec_fibre[c(1, 2, 3, 4, 10, 16:27)]
#df_évol = df_évol_paca_samplé
# GUADELOUPE
df_évol_guadeloupe = reformat_data_frame(normaliser(df_évol_guadeloupe))
df_évol_guadeloupe = plot_evolution_fibre(df_évol_guadeloupe)
# PACA
df_évol_paca = reformat_data_frame(normaliser(df_évol_paca))
df_évol_paca = plot_evolution_fibre(df_évol_paca)
# MARTINIQUE
df_évol_martinique = reformat_data_frame(normaliser(df_évol_martinique))
df_évol_martinique = plot_evolution_fibre(df_évol_martinique)
df_évol_guadeloupe[df_évol_guadeloupe$`catégorie de croissance` == 2, ]
ks.test(df_évol_guadeloupe[df_évol_guadeloupe$`catégorie de croissance` == 2, ]$label,
df_évol_paca[df_évol_paca$`catégorie de croissance` == 2, ]$label)
ks.test(df_évol_paca[df_évol_paca$`catégorie de croissance` == 3, ]$label,
df_évol_paca[df_évol_paca$`catégorie de croissance` == 2, ]$label)
}
run()
source('~/Gitlab/journalisme_donnees/évolutions.R', encoding = 'UTF-8', echo=TRUE)
run = function() {
## CHOIX DE LA ZONE
df_évol_paca = df_paca_avec_fibre[df_paca_avec_fibre$`Meilleure estimation des locaux à date` >
10000, ][c(1, 2, 3, 4, 10, 16:27)]
df_évol_paca_samplé  = df_évol_paca[sample(c(0:nrow(df_évol_paca)), size =
10), ]
df_évol_martinique = df_martinique_avec_fibre[c(1, 2, 3, 4, 10, 16:27)]
df_évol_guadeloupe = df_guadeloupe_avec_fibre[c(1, 2, 3, 4, 10, 16:27)]
#df_évol = df_évol_paca_samplé
# GUADELOUPE
df_évol_guadeloupe = reformat_data_frame(normaliser(df_évol_guadeloupe))
df_évol_guadeloupe = plot_evolution_fibre(df_évol_guadeloupe)
# PACA
df_évol_paca = reformat_data_frame(normaliser(df_évol_paca))
df_évol_paca = plot_evolution_fibre(df_évol_paca)
# MARTINIQUE
df_évol_martinique = reformat_data_frame(normaliser(df_évol_martinique))
df_évol_martinique = plot_evolution_fibre(df_évol_martinique)
df_évol_guadeloupe[df_évol_guadeloupe$`catégorie de croissance` == 2, ]
ks.test(df_évol_guadeloupe[df_évol_guadeloupe$`catégorie de croissance` == 2, ]$Delta,
df_évol_paca[df_évol_paca$`catégorie de croissance` == 2, ]$Delta)
ks.test(df_évol_paca[df_évol_paca$`catégorie de croissance` == 3, ]$Delta,
df_évol_paca[df_évol_paca$`catégorie de croissance` == 2, ]$Delta)
}
run()
plot_evolution_fibre = function(df_évol) {
df_évol2 <- df_évol %>% pivot_longer(cols = 6:17,
names_to = "Date",
values_to = "Proportion de locaux éligibles à la fibre")
#print(df_évol)
#print(tmp)
#df_évol$`Nom commune`
myplot = ggplot(
df_évol2,
aes(
x = `Date`,
y = `Proportion de locaux éligibles à la fibre`,
color = `Nom commune`,
group = `Nom commune`,
#label = `Nom commune`
),
) +
#ylim(0,1.5) +
geom_point() + geom_line()
#  print(df_évol2)
end_points_1 = (df_évol2 %>% filter(Date == "2020/07/01")
%>% filter(`catégorie de croissance` == 1))
end_points_2 = (df_évol2 %>% filter(Date == "2020/07/01")
%>% filter(`catégorie de croissance` == 2))
end_points_3 = (df_évol2 %>% filter(Date == "2020/07/01")
%>% filter(`catégorie de croissance` == 3))
#print(end_points)
myplot <- myplot +
geom_text_repel(
aes(label = Delta),
data = end_points_1,
fontface = "plain",
color = "blue",
size = 3
) +
geom_text_repel(
aes(label = Delta),
data = end_points_2,
fontface = "plain",
color = "purple",
size = 3
) +
geom_text_repel(
aes(label = Delta),
data = end_points_3,
fontface = "plain",
color = "red",
size = 3
)
print(myplot)
return(df_évol)
}
run = function() {
## CHOIX DE LA ZONE
df_évol_paca = df_paca_avec_fibre[df_paca_avec_fibre$`Meilleure estimation des locaux à date` >
10000, ][c(1, 2, 3, 4, 10, 16:27)]
df_évol_paca_samplé  = df_évol_paca[sample(c(0:nrow(df_évol_paca)), size =
10), ]
df_évol_martinique = df_martinique_avec_fibre[c(1, 2, 3, 4, 10, 16:27)]
df_évol_guadeloupe = df_guadeloupe_avec_fibre[c(1, 2, 3, 4, 10, 16:27)]
#df_évol = df_évol_paca_samplé
# GUADELOUPE
df_évol_guadeloupe = reformat_data_frame(normaliser(df_évol_guadeloupe))
df_évol_guadeloupe = plot_evolution_fibre(df_évol_guadeloupe)
# PACA
df_évol_paca = reformat_data_frame(normaliser(df_évol_paca))
df_évol_paca = plot_evolution_fibre(df_évol_paca)
# MARTINIQUE
df_évol_martinique = reformat_data_frame(normaliser(df_évol_martinique))
df_évol_martinique = plot_evolution_fibre(df_évol_martinique)
df_évol_guadeloupe[df_évol_guadeloupe$`catégorie de croissance` == 2, ]
ks.test(df_évol_guadeloupe[df_évol_guadeloupe$`catégorie de croissance` == 2, ]$Delta,
df_évol_paca[df_évol_paca$`catégorie de croissance` == 2, ]$Delta)
ks.test(df_évol_paca[df_évol_paca$`catégorie de croissance` == 3, ]$Delta,
df_évol_paca[df_évol_paca$`catégorie de croissance` == 2, ]$Delta)
}
run()
source('~/Gitlab/journalisme_donnees/évolutions.R', encoding = 'UTF-8', echo=TRUE)
View(df_évol_paca)
